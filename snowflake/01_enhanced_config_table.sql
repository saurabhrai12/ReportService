-- Enhanced Snowflake Configuration Table with Dual Trigger Support
-- This script creates the enhanced report configuration table that supports
-- both ADHOC (immediate) and SCHEDULED (time-based) triggers

-- Create database and schema if they don't exist
CREATE DATABASE IF NOT EXISTS REPORTING_DB;
CREATE SCHEMA IF NOT EXISTS REPORTING_DB.CONFIG;

-- Use the correct context
USE REPORTING_DB.CONFIG;

-- Drop existing table if it exists (for clean setup)
DROP TABLE IF EXISTS REPORTING_DB.CONFIG.REPORT_CONFIG;

-- Create enhanced configuration table with dual trigger support
CREATE TABLE REPORTING_DB.CONFIG.REPORT_CONFIG (
    CONFIG_ID VARCHAR(50) PRIMARY KEY,
    REPORT_NAME VARCHAR(200) NOT NULL,
    REPORT_TYPE VARCHAR(100) NOT NULL,
    
    -- Trigger type: ADHOC for immediate processing, SCHEDULED for time-based
    TRIGGER_TYPE VARCHAR(20) NOT NULL DEFAULT 'ADHOC', -- Valid values: 'ADHOC', 'SCHEDULED'
    
    -- Scheduling fields (only used for SCHEDULED reports)
    SCHEDULE_EXPRESSION VARCHAR(100), -- Cron expression for scheduling
    NEXT_RUN_TIME TIMESTAMP_LTZ,     -- When this report should run next
    LAST_RUN_TIME TIMESTAMP_LTZ,     -- When this report last ran
    
    -- Status and control fields
    STATUS VARCHAR(20) DEFAULT 'PENDING', -- Valid values: 'PENDING', 'PROCESSING', 'COMPLETED', 'FAILED'
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    
    -- Metadata fields
    CREATED_TIMESTAMP TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
    UPDATED_TIMESTAMP TIMESTAMP_LTZ DEFAULT CURRENT_TIMESTAMP(),
    CREATED_BY VARCHAR(100) DEFAULT CURRENT_USER(),
    
    -- Report configuration (JSON for flexibility)
    REPORT_CONFIG VARIANT, -- Store report-specific configuration as JSON
    
    -- Priority for ADHOC reports (1=highest, 5=lowest)
    PRIORITY INTEGER DEFAULT 3, -- Valid range: 1-5
        
    -- Retry configuration
    MAX_RETRIES INTEGER DEFAULT 3,
    CURRENT_RETRIES INTEGER DEFAULT 0,
    
    -- Output configuration
    OUTPUT_FORMAT VARCHAR(20) DEFAULT 'EXCEL', -- Valid values: 'EXCEL', 'PDF', 'CSV', 'JSON'
    OUTPUT_PATH VARCHAR(500), -- S3 path where report will be stored
    
    -- Notification settings
    NOTIFY_ON_COMPLETION BOOLEAN DEFAULT FALSE,
    NOTIFICATION_RECIPIENTS VARCHAR(1000), -- Comma-separated email list
    
    -- Error tracking
    ERROR_MESSAGE VARCHAR(5000),
    ERROR_TIMESTAMP TIMESTAMP_LTZ
);

-- Add comments to table and columns
ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG SET COMMENT = 'Enhanced report configuration table supporting both ADHOC and SCHEDULED triggers';

--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN CONFIG_ID SET COMMENT ='Unique identifier for the report configuration';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN REPORT_NAME SET COMMENT = 'Human-readable name of the report';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN REPORT_TYPE SET COMMENT = 'Type/category of the report (e.g., SALES, FINANCE, OPERATIONS)';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN TRIGGER_TYPE SET COMMENT = 'Trigger type: ADHOC for immediate processing, SCHEDULED for time-based';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN SCHEDULE_EXPRESSION SET COMMENT = 'Cron expression for scheduled reports (e.g., 0 9 * * 1 for Mondays at 9 AM)';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN NEXT_RUN_TIME SET COMMENT = 'Next scheduled execution time for SCHEDULED reports';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN STATUS SET COMMENT 'Current processing status of the report';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN IS_ACTIVE SET COMMENT 'Whether this report configuration is active';
--ALTER TABLE REPORTING_DB.CONFIG.REPORT_CONFIG ALTER COLUMN PRIORITY SET COMMENT 'Priority level for ADHOC reports (1=highest, 5=lowest)';

-- Create indexes for performance
--CREATE INDEX IF NOT EXISTS IDX_REPORT_CONFIG_STATUS ON REPORTING_DB.CONFIG.REPORT_CONFIG(STATUS);
--CREATE INDEX IF NOT EXISTS IDX_REPORT_CONFIG_TRIGGER_TYPE ON REPORTING_DB.CONFIG.REPORT_CONFIG(TRIGGER_TYPE);
--CREATE INDEX IF NOT EXISTS IDX_REPORT_CONFIG_ACTIVE ON REPORTING_DB.CONFIG.REPORT_CONFIG(IS_ACTIVE);
--CREATE INDEX IF NOT EXISTS IDX_REPORT_CONFIG_NEXT_RUN ON REPORTING_DB.CONFIG.REPORT_CONFIG(NEXT_RUN_TIME);
--CREATE INDEX IF NOT EXISTS IDX_REPORT_CONFIG_PRIORITY ON REPORTING_DB.CONFIG.REPORT_CONFIG(TRIGGER_TYPE, PRIORITY, STATUS);

-- Create a view for easy querying of pending ADHOC reports
CREATE OR REPLACE VIEW REPORTING_DB.CONFIG.V_PENDING_ADHOC_REPORTS AS
SELECT 
    CONFIG_ID,
    REPORT_NAME,
    REPORT_TYPE,
    PRIORITY,
    CREATED_TIMESTAMP,
    REPORT_CONFIG,
    OUTPUT_FORMAT,
    OUTPUT_PATH,
    NOTIFY_ON_COMPLETION,
    NOTIFICATION_RECIPIENTS
FROM REPORTING_DB.CONFIG.REPORT_CONFIG 
WHERE STATUS = 'PENDING' 
  AND TRIGGER_TYPE = 'ADHOC' 
  AND IS_ACTIVE = TRUE
ORDER BY PRIORITY ASC, CREATED_TIMESTAMP DESC;

-- Create a view for easy querying of due scheduled reports
CREATE OR REPLACE VIEW REPORTING_DB.CONFIG.V_DUE_SCHEDULED_REPORTS AS
SELECT 
    CONFIG_ID,
    REPORT_NAME,
    REPORT_TYPE,
    SCHEDULE_EXPRESSION,
    NEXT_RUN_TIME,
    LAST_RUN_TIME,
    CREATED_TIMESTAMP,
    REPORT_CONFIG,
    OUTPUT_FORMAT,
    OUTPUT_PATH,
    NOTIFY_ON_COMPLETION,
    NOTIFICATION_RECIPIENTS
FROM REPORTING_DB.CONFIG.REPORT_CONFIG 
WHERE STATUS = 'PENDING' 
  AND TRIGGER_TYPE = 'SCHEDULED' 
  AND IS_ACTIVE = TRUE
  AND (NEXT_RUN_TIME IS NULL OR NEXT_RUN_TIME <= CURRENT_TIMESTAMP())
ORDER BY NEXT_RUN_TIME ASC NULLS FIRST;

-- Create a summary view for monitoring
CREATE OR REPLACE VIEW REPORTING_DB.CONFIG.V_REPORT_SUMMARY AS
SELECT 
    TRIGGER_TYPE,
    STATUS,
    COUNT(*) as REPORT_COUNT,
    MIN(CREATED_TIMESTAMP) as OLDEST_REPORT,
    MAX(CREATED_TIMESTAMP) as NEWEST_REPORT,
    COUNT(CASE WHEN STATUS = 'FAILED' THEN 1 END) as FAILED_COUNT,
    COUNT(CASE WHEN STATUS = 'PROCESSING' THEN 1 END) as PROCESSING_COUNT
FROM REPORTING_DB.CONFIG.REPORT_CONFIG 
WHERE IS_ACTIVE = TRUE
GROUP BY TRIGGER_TYPE, STATUS
ORDER BY TRIGGER_TYPE, STATUS;

-- Grant permissions (adjust as needed for your environment)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON REPORTING_DB.CONFIG.REPORT_CONFIG TO ROLE REPORT_SERVICE_ROLE;
-- GRANT SELECT ON REPORTING_DB.CONFIG.V_PENDING_ADHOC_REPORTS TO ROLE REPORT_SERVICE_ROLE;
-- GRANT SELECT ON REPORTING_DB.CONFIG.V_DUE_SCHEDULED_REPORTS TO ROLE REPORT_SERVICE_ROLE;
-- GRANT SELECT ON REPORTING_DB.CONFIG.V_REPORT_SUMMARY TO ROLE REPORT_SERVICE_ROLE;

-- Insert sample data for testing
-- ADHOC reports for immediate processing
INSERT INTO REPORTING_DB.CONFIG.REPORT_CONFIG (
    CONFIG_ID, REPORT_NAME, REPORT_TYPE, TRIGGER_TYPE, PRIORITY, 
    OUTPUT_FORMAT, REPORT_CONFIG
) 
SELECT 'ADHOC_SALES_001', 'Urgent Sales Analysis', 'SALES', 'ADHOC', 1, 'EXCEL', 
       PARSE_JSON('{"date_range": "last_7_days", "include_forecast": true}');

INSERT INTO REPORTING_DB.CONFIG.REPORT_CONFIG (
    CONFIG_ID, REPORT_NAME, REPORT_TYPE, TRIGGER_TYPE, PRIORITY, 
    OUTPUT_FORMAT, REPORT_CONFIG
) 
SELECT 'ADHOC_INVENTORY_001', 'Stock Level Check', 'INVENTORY', 'ADHOC', 2, 'PDF', 
       PARSE_JSON('{"warehouse_locations": ["US_WEST", "US_EAST"], "low_stock_threshold": 100}');

-- SCHEDULED reports for time-based processing
INSERT INTO REPORTING_DB.CONFIG.REPORT_CONFIG (
    CONFIG_ID, REPORT_NAME, REPORT_TYPE, TRIGGER_TYPE, PRIORITY, 
    OUTPUT_FORMAT, REPORT_CONFIG
) 
SELECT 'SCHEDULED_MONTHLY_001', 'Monthly Sales Summary', 'SALES', 'SCHEDULED', 3, 'EXCEL', 
       PARSE_JSON('{"aggregation": "monthly", "include_trends": true}');

INSERT INTO REPORTING_DB.CONFIG.REPORT_CONFIG (
    CONFIG_ID, REPORT_NAME, REPORT_TYPE, TRIGGER_TYPE, PRIORITY, 
    OUTPUT_FORMAT, REPORT_CONFIG
) 
SELECT 'SCHEDULED_WEEKLY_001', 'Weekly Inventory Report', 'INVENTORY', 'SCHEDULED', 3, 'CSV', 
       PARSE_JSON('{"frequency": "weekly", "include_reorder_suggestions": true}');

-- Show the created table structure
DESCRIBE TABLE REPORTING_DB.CONFIG.REPORT_CONFIG;

-- Show sample data
SELECT 
    CONFIG_ID,
    REPORT_NAME,
    TRIGGER_TYPE,
    STATUS,
    PRIORITY,
    CREATED_TIMESTAMP
FROM REPORTING_DB.CONFIG.REPORT_CONFIG
ORDER BY TRIGGER_TYPE, PRIORITY;



INSERT INTO REPORTING_DB.CONFIG.REPORT_CONFIG (
      CONFIG_ID, REPORT_NAME, REPORT_TYPE, TRIGGER_TYPE, PRIORITY
  ) VALUES (
      'TEST_ADHOC_20250912', 'Test ADHOC Report', 'TEST', 'ADHOC', 1
  );